// src/components/shared/AppErrorBoundary.tsx

/**
 * App Error Boundary
 * 
 * @description A simple error boundary that prevents the entire React tree from crashing
 * when an unhandled runtime error (for example, the dreaded "Maximum update
 * depth exceeded" that can be triggered when the API is offline) bubbles up
 * from somewhere in the component hierarchy.
 * 
 * @author BranchManager69
 * @version 2.0.0
 * @created 2025-05-04
 * @updated 2025-05-07
 */

import React from "react";
// Importing directly keeps the TypeScript compiler happy and avoids the need
// for `require` which is not available in the browser ESM runtime generated by
// Vite.  The component is small, so the impact on bundle size is minimal.
import { ServerDownBanner } from "../layout/ServerDownBanner";
import Logo from "../ui/Logo";

// Simple error boundary that prevents the entire React tree from crashing
// when an unhandled runtime error (for example, the dreaded "Maximum update
// depth exceeded" that can be triggered when the API is offline) bubbles up
// from somewhere in the component hierarchy.
//
// Instead of letting React unmount the whole application and leaving the user
// with a blank page, we render a lightweight fallback that still contains the
// global styling (so there is no white flash) and – if the custom
// ServerDownBanner component is available – shows it to the user.  This way we
// preserve UX even when the backend is unreachable.
//
// NOTE: We intentionally keep the implementation minimal and dependency-free
// so that the boundary itself is extremely unlikely to throw.

interface AppErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

/**
 * AppErrorBoundary component
 * 
 * @description A simple error boundary that prevents the entire React tree from crashing
 * when an unhandled runtime error (for example, the dreaded "Maximum update
 * depth exceeded" that can be triggered when the API is offline) bubbles up
 */
export class AppErrorBoundary extends React.Component<
  { children: React.ReactNode },
  AppErrorBoundaryState
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  /**
   * getDerivedStateFromError
   * 
   * @description Updates the state so the next render shows the fallback UI.
   * 
   * @param error - The error that occurred.
   */
  static getDerivedStateFromError(error: Error): AppErrorBoundaryState {
    // Update state so the next render shows the fallback UI.
    return { hasError: true, error };
  }

  /**
   * componentDidCatch
   * 
   * @description Logs the error to the console.
   * 
   * @param error - The error that occurred.
   * @param info - The component stack trace.
   */
  componentDidCatch(error: Error, info: React.ErrorInfo) {
    // eslint-disable-next-line no-console
    console.error("[AppErrorBoundary]", error, info);
  }

  /**
   * render
   * 
   * @description Renders the fallback UI.
   */
  render() {
    if (this.state.hasError) {
      // ServerDownBanner is statically imported.
      // For an error boundary's fallback UI, a static import is preferred for reliability.
      // React.lazy() cannot be used as Suspense boundaries are not allowed in the fallback UI.
      // Given that ServerDownBanner is a small, local component, static import ensures it's always
      // available without adding async complexity or potential failure points to the error handling path.

      return (
        <div className="min-h-screen flex flex-col bg-dark-900 text-gray-100 items-center justify-center p-4 text-center">
          {ServerDownBanner ? <ServerDownBanner /> : null} 

          {/* 
          Logo (white) - commented out because it's not used in the error boundary
          <div className="my-8">
            <Logo size="md" logoColor="white" />
          </div>
          */}

          {/* Logo (black) */}
          <div className="my-8">
            <Logo size="md" logoColor="black" />
          </div>

          {/* Site is down message */}
          <div className="max-w-lg w-full px-4">

            {/* Title */}
            <h1 className="text-xl sm:text-2xl font-semibold text-red-400">
              DegenDuel is currently Degen<b>Down</b>...
            </h1>

            {/* Description */}
            <p className="text-sm sm:text-base text-gray-300 mt-3 leading-relaxed">
              There was an error loading DegenDuel. Please check the status below or try again shortly.
            </p>

            {/* Status link */}
            <div className="mt-6 text-sm space-y-3">
              <div>
                <a 
                  href="https://status.degenduel.me/"
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="text-brand-400 hover:text-brand-300 transition-colors font-medium"
                >
                  Check DegenDuel API Status
                </a>
              </div>

              {/* Contact links */}
              <div>

                {/* If issues persist, contact support via */}
                <span>If issues persist, contact support via </span>

                {/* Discord link */}
                <a 
                  href="https://discord.gg/dduel" 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="text-brand-400 hover:text-brand-300 transition-colors font-medium"
                >
                  Discord
                </a>

                {/* OR */}
                <span> or </span>

                {/* Link to DegenDuel's X account */}
                <a 
                  href="https://x.com/DegenDuelMe" 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="text-brand-400 hover:text-brand-300 transition-colors font-medium"
                >
                  X (@DegenDuelMe)
                </a> 

                {/* Link to the developer's account */}
                <a 
                  href="https://x.com/BranchManager69" 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="text-brand-400 hover:text-brand-300 transition-colors font-medium"
                >
                  X (@BranchManager69)
                </a>

              </div>
            </div>

            {/* Other links */}
            <div className="mt-8 flex flex-col sm:flex-row gap-4 text-sm justify-center">
              
              {/* Link to DegenDuel documentation */}
              <a 
                href="https://docs.degenduel.me/" 
                target="_blank" 
                rel="noopener noreferrer" 
                className="text-brand-400 hover:text-brand-300 transition-colors font-medium"
              >
                Documentation
              </a>

              {/* Link to frontend GitHub repo */}
              <a 
                href="https://github.com/BranchManager69/degenduel-fe" 
                target="_blank" 
                rel="noopener noreferrer" 
                className="text-brand-400 hover:text-brand-300 transition-colors font-medium"
              >
                GitHub
              </a>

            </div>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}
