import React from "react";
// Importing directly keeps the TypeScript compiler happy and avoids the need
// for `require` which is not available in the browser ESM runtime generated by
// Vite.  The component is small, so the impact on bundle size is minimal.
import { ServerDownBanner } from "../layout/ServerDownBanner";
import Logo from "../ui/Logo";

// Simple error boundary that prevents the entire React tree from crashing
// when an unhandled runtime error (for example, the dreaded "Maximum update
// depth exceeded" that can be triggered when the API is offline) bubbles up
// from somewhere in the component hierarchy.
//
// Instead of letting React unmount the whole application and leaving the user
// with a blank page, we render a lightweight fallback that still contains the
// global styling (so there is no white flash) and – if the custom
// ServerDownBanner component is available – shows it to the user.  This way we
// preserve UX even when the backend is unreachable.
//
// NOTE: We intentionally keep the implementation minimal and dependency-free
// so that the boundary itself is extremely unlikely to throw.

interface AppErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

export class AppErrorBoundary extends React.Component<
  { children: React.ReactNode },
  AppErrorBoundaryState
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): AppErrorBoundaryState {
    // Update state so the next render shows the fallback UI.
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, info: React.ErrorInfo) {
    // eslint-disable-next-line no-console
    console.error("[AppErrorBoundary]", error, info);
  }

  render() {
    if (this.state.hasError) {
      // Importing at the top level would pull the banner into the critical
      // rendering path even when it is never shown.  We instead lazily load it
      // here.  React `lazy()` cannot be used because we are inside an error
      // state (Suspense boundaries are not allowed in the fallback UI).  We
      // therefore use a simple dynamic `import()` wrapped in a `useState`
      // friendly check.

      const Banner = ServerDownBanner;
      return (
        <div className="min-h-screen flex flex-col bg-dark-900 text-gray-100 items-center justify-center p-4 text-center">
          {Banner ? <Banner /> : null}
          <div className="mb-6">
            <Logo size="md" />
          </div>
          <h1 className="text-xl sm:text-2xl font-semibold mt-4">
            DegenDuel is currently Degen<b>Down</b>.
          </h1>
          <p className="text-sm sm:text-base text-gray-400 mt-2 max-w-md">
            There was an error loading DegenDuel.
            <a href="https://status.degenduel.me/" target="_blank" rel="noopener noreferrer" className="text-brand-400 hover:text-brand-300 transition-colors">
              DegenDuel API Status
            </a>
            If this persists, join the #help channel of the <a href="https://discord.gg/dduel" target="_blank" rel="noopener noreferrer" className="text-brand-400 hover:text-brand-300 transition-colors">
              DegenDuel Discord server
            </a> or contact <a href="https://x.com/BranchManager69" target="_blank" rel="noopener noreferrer" className="text-brand-400 hover:text-brand-300 transition-colors">
              @BranchManager69
            </a> on X.
          </p>
          <div className="mt-6 flex flex-col sm:flex-row gap-4 text-sm">
            <a
              href="https://x.com/DegenDuelMe"
              target="_blank"
              rel="noopener noreferrer"
              className="text-brand-400 hover:text-brand-300 transition-colors"
            >
              Follow us on X (Twitter)
            </a>
            <a
              href="https://status.degenduel.me/"
              target="_blank"
              rel="noopener noreferrer"
              className="text-brand-400 hover:text-brand-300 transition-colors"
            >
              DegenDuel API Status
            </a>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}
