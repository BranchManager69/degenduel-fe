‚óè Biometric Authentication Integration Guide for Frontend Team (Updated)

  Overview

  We've implemented WebAuthn (biometric authentication) enabling users to sign in with Face ID, Touch ID, or Windows
  Hello. This system securely links biometric authentication to user accounts and provides a seamless login experience.

  New Endpoints

  All endpoints are under /api/auth/biometric/

  1. Registration Flow

  Get Registration Options

  POST /api/auth/biometric/register-options

  Auth Required: Yes (user must be logged in)

  Request Body:
  {
    "nickname": "Optional user nickname",
    "authenticatorType": "platform" // Optional: "platform" (Face ID, Touch ID) or "cross-platform" (security keys)
  }

  Response:
  {
    "challenge": "base64-encoded-challenge",
    "rp": {
      "name": "DegenDuel",
      "id": "degenduel.me"
    },
    "user": {
      "id": "base64-encoded-user-id",
      "name": "username-or-wallet-address",
      "displayName": "User Nickname or Shortened Address"
    },
    "pubKeyCredParams": [
      { "alg": -7, "type": "public-key" },
      { "alg": -257, "type": "public-key" }
    ],
    "timeout": 60000,
    "excludeCredentials": [
      {
        "id": "base64-encoded-credential-id",
        "type": "public-key",
        "transports": ["internal"]
      }
    ], // Empty for first registration, contains existing credentials for subsequent ones
    "authenticatorSelection": {
      "authenticatorAttachment": "platform",
      "requireResidentKey": false,
      "userVerification": "preferred"
    },
    "attestation": "none"
  }

  Verify Registration

  POST /api/auth/biometric/register-verify

  Auth Required: Yes

  Request Body: The attestation response from WebAuthn API:
  {
    "id": "credential-id",
    "rawId": "base64-encoded-raw-id",
    "response": {
      "attestationObject": "base64-encoded-attestation-object",
      "clientDataJSON": "base64-encoded-client-data-json"
    },
    "type": "public-key",
    "deviceName": "My iPhone", // Optional
    "deviceType": "mobile" // Optional: "mobile", "desktop", "tablet"
  }

  Response:
  {
    "success": true,
    "message": "Biometric authentication registered successfully",
    "credentialId": "credential-id-string"
  }

  2. Authentication Flow

  Get Authentication Options

  POST /api/auth/biometric/auth-options

  Auth Required: No (this is for login)

  Request Body:
  {
    "userId": "user-wallet-address",
    "credentialId": "specific-credential-id" // Optional
  }

  Response:
  {
    "challenge": "base64-encoded-challenge",
    "timeout": 60000,
    "rpId": "degenduel.me",
    "allowCredentials": [
      {
        "id": "base64-encoded-credential-id-1",
        "type": "public-key",
        "transports": ["internal", "hybrid", "ble", "nfc", "usb"]
      },
      {
        "id": "base64-encoded-credential-id-2",
        "type": "public-key",
        "transports": ["internal", "hybrid", "ble", "nfc", "usb"]
      }
    ],
    "userVerification": "preferred"
  }

  Verify Authentication

  POST /api/auth/biometric/auth-verify

  Auth Required: No (this is for login)

  Request Body: The assertion response from WebAuthn API plus userId:
  {
    "id": "credential-id",
    "rawId": "base64-encoded-raw-id",
    "response": {
      "authenticatorData": "base64-encoded-authenticator-data",
      "clientDataJSON": "base64-encoded-client-data-json",
      "signature": "base64-encoded-signature",
      "userHandle": "base64-encoded-user-handle"
    },
    "type": "public-key",
    "userId": "user-wallet-address"
  }

  Response: Same as other authentication methods:
  {
    "verified": true,
    "user": {
      "wallet_address": "user-wallet-address",
      "role": "user",
      "nickname": "User's Nickname"
    },
    "device": {
      "device_authorized": true,
      "device_id": "credential-id",
      "device_name": "iPhone 15 Pro",
      "requires_authorization": false
    },
    "auth_method": "biometric"
  }

  3. Credential Management

  List Credentials

  GET /api/auth/biometric/credentials

  Auth Required: Yes

  Response:
  {
    "credentials": [
      {
        "id": "credential-id-1",
        "name": "iPhone 15 Pro",
        "created_at": "2025-04-07T10:00:00Z",
        "last_used": "2025-04-07T11:30:00Z",
        "device_type": "mobile"
      },
      {
        "id": "credential-id-2",
        "name": "MacBook Pro",
        "created_at": "2025-04-01T14:20:00Z",
        "last_used": "2025-04-06T09:15:00Z",
        "device_type": "desktop"
      }
    ]
  }

  Delete Credential

  DELETE /api/auth/biometric/credentials/:id

  Auth Required: Yes

  Response:
  {
    "success": true,
    "message": "Credential deleted successfully"
  }

  Frontend Implementation Guide

  Required Dependencies

  npm install @simplewebauthn/browser

  1. Registration Process

  import { startRegistration } from '@simplewebauthn/browser';

  async function registerBiometric() {
    try {
      // 1. Get options from server
      const optionsResponse = await fetch('/api/auth/biometric/register-options', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          // Optional values
          nickname: userNickname,
          authenticatorType: 'platform' // For Face ID/Touch ID
        }),
        credentials: 'include' // Include cookies
      });

      const options = await optionsResponse.json();

      // 2. Start the WebAuthn registration process
      // This will trigger the Face ID/Touch ID prompt
      const attestation = await startRegistration(options);

      // 3. Send the result back to your server for verification
      const verifyResponse = await fetch('/api/auth/biometric/register-verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...attestation,
          deviceName: getDeviceName(), // Function to get device name
          deviceType: getDeviceType() // Function to determine device type
        }),
        credentials: 'include'
      });

      const verifyResult = await verifyResponse.json();

      if (verifyResult.success) {
        // Registration successful
        showSuccessMessage('Biometric authentication registered successfully!');
      } else {
        // Registration failed
        showErrorMessage(verifyResult.error || 'Registration failed');
      }
    } catch (error) {
      // Handle errors - common cases include:
      // - User canceled the biometric prompt
      // - Device doesn't support biometric authentication
      // - Network issues
      if (error.name === 'NotAllowedError') {
        showErrorMessage('You canceled the biometric registration');
      } else if (error.name === 'NotSupportedError') {
        showErrorMessage('Your device doesn\'t support biometric authentication');
      } else {
        showErrorMessage(`Error: ${error.message}`);
        console.error(error);
      }
    }
  }

  // Helper functions for device information
  function getDeviceName() {
    const userAgent = navigator.userAgent;

    if (/iPhone/.test(userAgent)) {
      return 'iPhone';
    } else if (/iPad/.test(userAgent)) {
      return 'iPad';
    } else if (/Mac/.test(userAgent)) {
      return 'Mac';
    } else if (/Windows/.test(userAgent)) {
      return 'Windows PC';
    } else if (/Android/.test(userAgent)) {
      return 'Android Device';
    } else {
      return 'Unknown Device';
    }
  }

  function getDeviceType() {
    const userAgent = navigator.userAgent;

    if (/iPhone|Android(?!.*Tablet)|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {
      return 'mobile';
    } else if (/iPad|Android.*Tablet/i.test(userAgent)) {
      return 'tablet';
    } else {
      return 'desktop';
    }
  }

  2. Authentication Process

  import { startAuthentication } from '@simplewebauthn/browser';

  async function loginWithBiometric(userId) {
    try {
      // 1. Get options from server
      const optionsResponse = await fetch('/api/auth/biometric/auth-options', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId })
      });

      if (!optionsResponse.ok) {
        const errorData = await optionsResponse.json();

        if (errorData.error === 'no_credentials') {
          throw new Error('No biometric credentials found. Please register first.');
        }

        throw new Error(errorData.message || 'Failed to get authentication options');
      }

      const options = await optionsResponse.json();

      // 2. Start the WebAuthn authentication process
      // This will trigger the Face ID/Touch ID prompt
      const assertion = await startAuthentication(options);

      // 3. Send the result back to your server for verification
      const verifyResponse = await fetch('/api/auth/biometric/auth-verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...assertion,
          userId
        })
      });

      if (!verifyResponse.ok) {
        const errorData = await verifyResponse.json();
        throw new Error(errorData.message || 'Authentication failed');
      }

      const verifyResult = await verifyResponse.json();

      if (verifyResult.verified) {
        // Authentication successful - user is now logged in
        // The server has set the JWT cookie
        return verifyResult.user;
      } else {
        // Authentication failed
        throw new Error(verifyResult.error || 'Authentication failed');
      }
    } catch (error) {
      // Handle authentication errors
      if (error.name === 'NotAllowedError') {
        throw new Error('You canceled the biometric authentication');
      } else if (error.name === 'InvalidStateError') {
        throw new Error('No registered credential found. Try another device or method.');
      } else {
        console.error('Biometric authentication error:', error);
        throw error;
      }
    }
  }

  3. Managing Credentials

  // Fetch user's registered biometric credentials
  async function getCredentials() {
    try {
      const response = await fetch('/api/auth/biometric/credentials', {
        credentials: 'include'
      });

      if (!response.ok) {
        throw new Error('Failed to fetch credentials');
      }

      return response.json();
    } catch (error) {
      console.error('Error fetching credentials:', error);
      throw error;
    }
  }

  // Delete a credential
  async function deleteCredential(credentialId) {
    try {
      const response = await fetch(`/api/auth/biometric/credentials/${credentialId}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      if (!response.ok) {
        throw new Error('Failed to delete credential');
      }

      return response.json();
    } catch (error) {
      console.error('Error deleting credential:', error);
      throw error;
    }
  }

  Complete Login Flow Example

  Here's a complete example of how to integrate biometric authentication into your login flow:

  import React, { useState, useEffect } from 'react';
  import { startAuthentication } from '@simplewebauthn/browser';

  function LoginScreen() {
    const [walletAddress, setWalletAddress] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const [isBiometricAvailable, setIsBiometricAvailable] = useState(false);

    useEffect(() => {
      // Check if biometric authentication is available
      async function checkBiometricSupport() {
        try {
          if (window.PublicKeyCredential &&
              typeof PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable === 'function') {
            const available = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
            setIsBiometricAvailable(available);
          }
        } catch (err) {
          console.error('Error checking biometric support:', err);
          setIsBiometricAvailable(false);
        }
      }

      checkBiometricSupport();
    }, []);

    const handleWalletInput = (e) => {
      setWalletAddress(e.target.value);
    };

    const handleBiometricLogin = async () => {
      if (!walletAddress) {
        setError('Please enter your wallet address first');
        return;
      }

      setIsLoading(true);
      setError(null);

      try {
        // Get authentication options
        const optionsResponse = await fetch('/api/auth/biometric/auth-options', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId: walletAddress })
        });

        if (!optionsResponse.ok) {
          const errorData = await optionsResponse.json();
          throw new Error(errorData.message || 'Failed to get authentication options');
        }

        const options = await optionsResponse.json();

        // Trigger Face ID/Touch ID
        const assertion = await startAuthentication(options);

        // Verify with server
        const verifyResponse = await fetch('/api/auth/biometric/auth-verify', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...assertion,
            userId: walletAddress
          })
        });

        if (!verifyResponse.ok) {
          const errorData = await verifyResponse.json();
          throw new Error(errorData.message || 'Authentication failed');
        }

        const authResult = await verifyResponse.json();

        if (authResult.verified) {
          // User authenticated successfully
          // Redirect to dashboard or home
          window.location.href = '/dashboard';
        } else {
          throw new Error('Authentication failed');
        }
      } catch (error) {
        console.error('Login error:', error);

        if (error.name === 'NotAllowedError') {
          setError('You canceled the biometric authentication');
        } else if (error.message.includes('no_credentials') || error.message.includes('No biometric credentials')) {
          setError('No biometric credentials found for this wallet. Please register first or use another login 
  method.');
        } else {
          setError(error.message || 'Authentication failed. Please try again.');
        }
      } finally {
        setIsLoading(false);
      }
    };

    const handleTraditionalLogin = async () => {
      // Your existing wallet authentication code here
    };

    return (
      <div className="login-container">
        <h1>DegenDuel Login</h1>

        {error && <div className="error-message">{error}</div>}

        <div className="form-group">
          <label htmlFor="wallet-address">Wallet Address</label>
          <input
            id="wallet-address"
            type="text"
            value={walletAddress}
            onChange={handleWalletInput}
            placeholder="Enter your wallet address"
            disabled={isLoading}
          />
        </div>

        <div className="login-buttons">
          <button 
            onClick={handleTraditionalLogin} 
            disabled={isLoading || !walletAddress}
            className="primary-button"
          >
            Sign in with Wallet
          </button>

          {isBiometricAvailable && (
            <button 
              onClick={handleBiometricLogin} 
              disabled={isLoading || !walletAddress}
              className="biometric-button"
            >
              <span className="icon">üîí</span>
              Sign in with Face ID / Touch ID
            </button>
          )}
        </div>

        {isLoading && <div className="loading-spinner">Authenticating...</div>}
      </div>
    );
  }

  export default LoginScreen;

  Device Support & Browser Compatibility

  Troubleshooting & Common Errors

  Browser Extension Issues

  Some browser extensions, particularly privacy-focused ones, may interfere with WebAuthn. If users experience issues:

  1. Try disabling extensions
  2. Use an incognito/private window
  3. Try a different browser

  Best Practices for Implementation

  1. Progressive Enhancement: Always provide traditional login methods alongside biometric authentication
  2. Clear User Feedback: Explain what's happening during biometric processes
  3. Error Recovery: Provide clear paths to recover from authentication failures
  4. Device Registration Flow: Make the process for adding biometric authentication clear and simple
  5. Device Management: Show users all registered devices and allow easy removal

  Registration UI Example

  function BiometricRegistration() {
    const [isRegistering, setIsRegistering] = useState(false);
    const [deviceName, setDeviceName] = useState(getDefaultDeviceName());
    const [success, setSuccess] = useState(false);
    const [error, setError] = useState(null);
    const [credentials, setCredentials] = useState([]);

    useEffect(() => {
      loadCredentials();
    }, []);

    async function loadCredentials() {
      try {
        const data = await getCredentials();
        setCredentials(data.credentials || []);
      } catch (err) {
        console.error('Failed to load credentials:', err);
      }
    }

    async function handleRegister() {
      setIsRegistering(true);
      setError(null);

      try {
        // Call the registration function we defined earlier
        await registerBiometric();
        setSuccess(true);
        loadCredentials(); // Refresh the credential list
      } catch (err) {
        setError(err.message);
      } finally {
        setIsRegistering(false);
      }
    }

    async function handleDelete(id) {
      try {
        await deleteCredential(id);
        loadCredentials(); // Refresh the credential list
      } catch (err) {
        setError(err.message);
      }
    }

    function formatDate(dateString) {
      return new Date(dateString).toLocaleString();
    }

    return (
      <div className="biometric-settings">
        <h2>Biometric Authentication</h2>

        {success && (
          <div className="success-message">
            Device registered successfully!
          </div>
        )}

        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        <div className="registration-section">
          <h3>Add a New Device</h3>
          <p>Register this device for Face ID/Touch ID login</p>

          <button 
            onClick={handleRegister} 
            disabled={isRegistering}
            className="register-button"
          >
            {isRegistering ? 'Registering...' : 'Register This Device'}
          </button>
        </div>

        <div className="credentials-section">
          <h3>Your Registered Devices</h3>

          {credentials.length === 0 ? (
            <p>No devices registered yet.</p>
          ) : (
            <ul className="credential-list">
              {credentials.map(cred => (
                <li key={cred.id} className="credential-item">
                  <div className="credential-info">
                    <span className="device-name">{cred.name}</span>
                    <span className="device-type">{cred.device_type}</span>
                    <span className="last-used">Last used: {formatDate(cred.last_used)}</span>
                  </div>
                  <button 
                    onClick={() => handleDelete(cred.id)}
                    className="delete-button"
                  >
                    Remove
                  </button>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    );
  }

  Implementation Checklist

  - Install @simplewebauthn/browser package
  - Add biometric login button to login screen
  - Implement biometric registration flow in account settings
  - Add device management UI in user profile/settings
  - Test on actual devices (not just simulators)
  - Add proper error handling
  - Ensure fallback to traditional login methods
  - Track biometric login usage with analytics

  Security Notes

  1. WebAuthn is designed to be phishing-resistant by verifying the origin
  2. The server only stores public key data, not biometric information
  3. All biometric validation happens on the user's device
  4. Biometric credentials cannot be transferred between devices
  5. Each device registration creates a new credential

  ---
  If you encounter any implementation issues or have questions about integrating biometric authentication, please reach
  out to the backend team.