  WebSocket System Flow in DegenDuel Frontend

  1. Files & Components Overview

  Configuration Files:
  - /src/config/config.ts - Defines WebSocket URL based on environment (localhost, dev, prod)

  Core WebSocket Infrastructure:
  - /src/utils/wsMonitor.ts - Central monitoring and tracking for all WebSockets
  - /src/hooks/useBaseWebSocket.ts - Base hook with connection/reconnection logic
  - /src/hooks/websocket/useWebSocket.ts - Standardized implementation wrapper around base hook
  - /src/hooks/websocket/WebSocketManager.tsx - Centralized component for initializing WebSockets
  - /src/hooks/websocket/types.ts - Common types and WebSocket endpoints

  Authentication:
  - /src/hooks/useAuth.ts - Provides authentication methods including:
    - Session token access (stored in user object)
    - Access token retrieval via API

  Monitoring Interface:
  - /src/components/debug/websocket/WebSocketMonitor.tsx - Admin-only UI for monitoring

  Individual WebSocket Implementations:
  - Various /src/hooks/use*WebSocket.ts hooks for different data types
  - V69-standardized implementations in /src/hooks/websocket/ directory

  2. System Startup Flow from User Perspective

  1. App Initialization

  When a user loads the app (App.tsx), the following happens:

  1. React Providers Initialize:
    - AuthProvider - Handles authentication state
    - ReferralProvider - Manages referral functionality
    - TokenDataProvider - Provides token data context
    - ToastProvider - Manages notifications
  2. WebSocketManager Mounts:
    - Placed high in the component tree to manage WebSocket connections
    - Initializes global WebSocket tracking via initializeWebSocketTracking()
    - Sets up core WebSockets that should always be connected:
        - Server status WebSocket (public, no auth)
      - Token data WebSocket (public, no auth)
  3. Monitoring System Initializes:
    - wsMonitor.ts creates global tracking objects in the window:
        - window.DDActiveWebSockets - Tracks active connections
      - window.DDConnectionAttempts - Tracks connection attempts
      - window.DDLastWebSocketErrors - Tracks recent errors

  2. Authentication Flow

  1. User Connects Wallet:
    - After wallet connection, user gets authenticated
    - Server issues a session token stored in the user object
  2. Session Token Availability:
    - Stored in store: user.session_token
    - Used for WebSocket subprotocol authentication
  3. Access Token Availability:
    - Available via getAccessToken() method in useAuth hook
    - Used for message-based authentication in some WebSockets

  3. WebSocket Connection Establishment

  For each WebSocket connection, the flow is:

  1. Connection Request:
    - useWebSocket hook calls useBaseWebSocket
    - useBaseWebSocket constructs WebSocket URL: ${baseWsUrl}${config.endpoint}
    - If requiresAuth is true and session token is available, it's passed as subprotocol:
    new WebSocket(`${baseWsUrl}${config.endpoint}`, user.session_token)
    - Otherwise, connection is established without authentication:
    new WebSocket(`${baseWsUrl}${config.endpoint}`)
  2. Connection Tracking:
    - trackConnectionAttempt() is called to log the attempt
    - On successful connection, trackWebSocketConnection() is called
    - Events dispatched to monitoring system via dispatchWebSocketEvent()
  3. Initial Handshake & Authentication:
    - Two different authentication methods exist:
        - Subprotocol Method: Session token passed during connection (in useBaseWebSocket.ts)
      - Message Method: Access token sent after connection (in original useTokenDataWebSocket.ts)
    - For the message method, authentication sequence is:
    wsRef.current.send(JSON.stringify({
    type: "authenticate",
    token: token
  }));
  4. Data Subscription:
    - After successful connection, WebSockets subscribe to relevant data
    - Example from useTokenDataWebSocket:
    // Request all tokens
  send({ type: "get_all_tokens" });

  // Subscribe to specific tokens
  if (tokensToSubscribe !== "all") {
    send({
      type: "subscribe_tokens",
      symbols: tokensToSubscribe
    });
  }

  4. Message Processing Flow

  1. Incoming Messages:
    - WebSocket onmessage handler parses JSON messages
    - Messages dispatched to monitoring system
    - Data passed to consumer components via state hooks
  2. Message Types:
    - System messages: ping, pong, status, error
    - Data messages: token_data, portfolio, contest, etc.
    - Authentication messages: authenticate, authorized
  3. Error Handling:
    - Connection errors trigger reconnection logic
    - Throttling applied for rapid disconnects
    - Errors dispatched to monitoring system
    - Toast notifications shown to users (with throttling)

  5. Heartbeat & Connection Maintenance

  1. Heartbeat System:
    - Periodic ping messages sent to server (configurable interval)
    - Expects pong responses to confirm connection health
    - Tracks missed heartbeats to detect "zombie" connections
    - Zombie connections (3+ missed heartbeats) are forcibly closed and reconnected
  2. Reconnection Logic:
    - Reconnection with exponential backoff
    - Additional throttling for rapidly failing connections
    - Example backoff calculation:
    let delay = Math.min(
    1000 * Math.pow(2, reconnectAttempts.current),
    30000 // Maximum 30 second base delay
  );
  3. Connection Monitoring:
    - All connection events tracked centrally
    - Admin users can view real-time connection status
    - Active connections vs. connection attempts tracked

  6. Admin Monitoring Interface

  Admin users have access to:

  1. WebSocket Monitor UI:
    - Real-time view of all active connections
    - Connection counts by type
    - Event log with filtering
    - Authentication token debugging
  2. Detailed Logging:
    - Connection events
    - Message traffic
    - Error details
    - Authentication status

  3. WebSocket Authentication Methods

  The system uses two different authentication approaches:

  Method 1: Session Token as WebSocket Subprotocol

  - Used in standardized V69 pattern (useBaseWebSocket.ts)
  - Session token passed during WebSocket creation:
  new WebSocket(url, user.session_token)
  - Server extracts token from WebSocket protocol
  - All future messages on this connection are authenticated

  Method 2: Access Token via Message

  - Used in some original implementations (useTokenDataWebSocket.ts)
  - Connection established first, then auth message sent:
  wsRef.current.send(JSON.stringify({
    type: "authenticate",
    token: token
  }));
  - Server authenticates based on this message
  - All subsequent messages on this connection are authenticated

  4. The Two WebSocket Implementation Patterns

  Pattern 1: Original/Legacy Pattern

  - Direct WebSocket management in individual hooks
  - Custom reconnection logic
  - Message-based authentication using getAccessToken()
  - Custom event handling
  - Less standardized monitoring

  Pattern 2: V69 Standardized Pattern

  - Uses useBaseWebSocket as foundation
  - Implements useWebSocket wrapper for consistency
  - Session token subprotocol authentication
  - Standardized endpoints in WEBSOCKET_ENDPOINT
  - Integrated with central monitoring via wsMonitor.ts
  - Consistent event handling and reconnection

  5. Conclusion: Complete Request → Response Flow

  Let's trace a complete flow from user perspective:

  1. User loads app → App.tsx renders → WebSocketManager initializes
  2. WebSocketManager starts core connections (server status, token data)
  3. When connecting to a WebSocket:
    - URL determined from config: wss://domain.com/api/v69/ws/endpoint
    - Authentication method chosen based on implementation pattern
    - Connection tracked in monitoring system
    - Heartbeat initialized
  4. Messages flow from server to client:
    - Parsed by appropriate message handlers
    - State updated in respective hooks
    - UI reacts to state changes
  5. If connection fails:
    - Reconnection logic activates with backoff
    - Fallbacks provided where appropriate
    - Error notifications shown (with throttling)
  6. Admin monitoring shows real-time connection status and debugging info

  This complete system provides robust real-time data communication with monitoring, reconnection, and consistent behavior across different data types.

## 6. Backend WebSocket Server Implementation

### Server Architecture

The DegenDuel backend WebSocket system is built on a Node.js server that implements the following components:

1. **Core WebSocket Server**
   - Implemented using `ws` or `socket.io` library
   - Handles connection establishment, messaging, and disconnections
   - Maintains connection pool for efficient resource management

2. **Authentication Middleware**
   - Validates session tokens provided via WebSocket subprotocols
   - Verifies access tokens sent in authentication messages
   - Associates WebSocket connections with authenticated users

3. **Service-Specific Endpoints**
   - Each service exposes a specific WebSocket endpoint (e.g., `/api/v69/ws/token-data`)
   - Endpoints handle domain-specific message formats and data streams

4. **Message Handling System**
   - Processes incoming client messages by type
   - Validates message payloads against schemas
   - Routes messages to appropriate service handlers

5. **Broadcast/Publication System**
   - Manages topic subscriptions for selective data distribution
   - Efficiently broadcasts updates to interested clients
   - Implements message queuing for handling high load

### Connection Protocol

1. **Connection Establishment**

   When a client attempts to connect to a WebSocket endpoint, the server:

   ```
   Client                                  Server
   ------                                  ------
   WebSocket(url, [session_token]) -----> Check WebSocket subprotocols for token
                                           Validate token with auth service
                                           Associate connection with user ID
   <----- Connection accepted or rejected
   ```

2. **Authentication Methods**

   The server supports two authentication methods:

   a. **Session Token as Subprotocol**:
   ```javascript
   // Server-side code (Node.js)
   wss.on('connection', function(ws, request) {
     // Extract session token from protocols array
     const sessionToken = ws.protocol;

     // Validate the token
     if (sessionToken) {
       validateToken(sessionToken)
         .then(user => {
           // Store user information with the connection
           ws.user = user;
           
           // Send confirmation message
           ws.send(JSON.stringify({
             type: 'connection_status',
             status: 'authenticated',
             userId: user.id
           }));
         })
         .catch(err => {
           // Authentication failed
           ws.close(1008, 'Authentication failed');
         });
     } else if (isPublicEndpoint(request.url)) {
       // Allow unauthenticated connections to public endpoints
       ws.send(JSON.stringify({
         type: 'connection_status',
         status: 'connected',
         authenticated: false
       }));
     } else {
       // Reject connection to protected endpoint
       ws.close(1008, 'Authentication required');
     }
   });
   ```

   b. **Message-Based Authentication**:
   ```javascript
   // Server-side code (Node.js)
   wss.on('connection', function(ws, request) {
     // Set a timeout for authentication
     const authTimeout = setTimeout(() => {
       if (!ws.authenticated && !isPublicEndpoint(request.url)) {
         ws.close(1008, 'Authentication timeout');
       }
     }, 30000); // 30 seconds

     // Handle authentication message
     ws.on('message', function(message) {
       const data = JSON.parse(message);
       
       if (data.type === 'authenticate') {
         validateToken(data.token)
           .then(user => {
             // Store user information with the connection
             ws.user = user;
             ws.authenticated = true;
             clearTimeout(authTimeout);
             
             // Send confirmation message
             ws.send(JSON.stringify({
               type: 'authentication_result',
               status: 'success',
               userId: user.id
             }));
           })
           .catch(err => {
             // Authentication failed
             ws.send(JSON.stringify({
               type: 'authentication_result',
               status: 'failed',
               error: 'Invalid token'
             }));
           });
       }
     });
   });
   ```

3. **Message Format**

   All messages between client and server follow this JSON format:

   ```javascript
   {
     "type": "message_type",   // Required: indicates the message purpose
     ...payload fields...,     // Varies by message type
     "timestamp": "ISO date"   // Optional: timestamp of message creation
   }
   ```

   Common message types include:
   - System messages: `ping`, `pong`, `error`, `status`
   - Authentication messages: `authenticate`, `authentication_result`
   - Subscription messages: `subscribe_tokens`, `unsubscribe_tokens`
   - Data messages: `token_data`, `token_update`, `portfolio_update`

### Data Flow Implementation

1. **Data Publication**

   When new data is available for distribution:

   ```javascript
   // Server-side data publishing
   function publishTokenUpdate(token) {
     // Find all clients subscribed to this token
     const subscribedClients = clients.filter(client => 
       client.subscriptions && client.subscriptions.includes(token.symbol)
     );
     
     // Send update to each subscribed client
     subscribedClients.forEach(client => {
       if (client.readyState === WebSocket.OPEN) {
         client.send(JSON.stringify({
           type: 'token_data',
           symbol: token.symbol,
           data: token,
           timestamp: new Date().toISOString()
         }));
       }
     });
   }
   ```

2. **Subscription Management**

   Handling client subscriptions:

   ```javascript
   // Server-side subscription handling
   function handleSubscription(ws, message) {
     // Initialize subscriptions array if not exists
     if (!ws.subscriptions) ws.subscriptions = [];
     
     // Add new subscriptions
     const newSubscriptions = message.symbols.filter(symbol => 
       !ws.subscriptions.includes(symbol)
     );
     
     ws.subscriptions = [...ws.subscriptions, ...newSubscriptions];
     
     // Send confirmation to client
     ws.send(JSON.stringify({
       type: 'tokens_subscribed',
       symbols: newSubscriptions,
       count: newSubscriptions.length,
       timestamp: new Date().toISOString()
     }));
     
     // Send initial data for newly subscribed tokens
     sendInitialTokenData(ws, newSubscriptions);
   }
   ```

3. **Error Handling**

   When errors occur during message processing:

   ```javascript
   // Server-side error handling
   function handleMessageError(ws, error, messageType) {
     console.error(`Error processing ${messageType} message:`, error);
     
     ws.send(JSON.stringify({
       type: 'error',
       code: error.code || 'PROCESSING_ERROR',
       message: 'Failed to process message',
       details: error.message,
       originalType: messageType,
       timestamp: new Date().toISOString()
     }));
   }
   ```

### Connection Maintenance

1. **Heartbeat System**

   The server implements a ping/pong heartbeat system:

   ```javascript
   // Server-side heartbeat implementation
   function setupHeartbeat(ws) {
     // Clear any existing timers
     if (ws.pingInterval) clearInterval(ws.pingInterval);
     if (ws.pingTimeout) clearTimeout(ws.pingTimeout);
     
     // Send a ping every 30 seconds
     ws.pingInterval = setInterval(() => {
       if (ws.readyState === WebSocket.OPEN) {
         // Mark the connection as awaiting a pong
         ws.isAlive = false;
         
         // Send ping
         ws.send(JSON.stringify({
           type: 'ping',
           timestamp: new Date().toISOString()
         }));
         
         // Set timeout for pong response
         ws.pingTimeout = setTimeout(() => {
           if (!ws.isAlive) {
             console.log('Terminating connection - heartbeat failed');
             ws.terminate();
           }
         }, 10000); // 10 second timeout
       }
     }, 30000); // 30 second interval
     
     // Handle pong messages
     ws.on('message', (message) => {
       try {
         const data = JSON.parse(message);
         if (data.type === 'pong') {
           ws.isAlive = true;
         }
       } catch (e) {
         // Not a JSON message or not a pong
       }
     });
   }
   ```

2. **Connection Cleanup**

   Proper cleanup when connections close:

   ```javascript
   // Server-side connection cleanup
   ws.on('close', (code, reason) => {
     // Clear heartbeat timers
     if (ws.pingInterval) clearInterval(ws.pingInterval);
     if (ws.pingTimeout) clearTimeout(ws.pingTimeout);
     
     // Remove from any subscription tracking
     removeFromSubscriptionRegistry(ws);
     
     // Log closure
     console.log(`WebSocket closed: ${code} ${reason}`);
   });
   ```

### Server Scaling Considerations

1. **Load Balancing**
   - Use sticky sessions to ensure WebSocket connections stay on the same server
   - Implement Redis or similar for shared state across multiple server instances

2. **Connection Limits**
   - Default to 10,000 concurrent connections per server instance
   - Set appropriate timeouts for idle connections (typically 2-5 minutes)
   - Implement rate limiting for connection attempts (max 10/minute per IP)

3. **Message Queue**
   - For high-throughput systems, use a message queue (RabbitMQ, Kafka)
   - Publish updates to the queue and have workers distribute to connected clients

4. **Monitoring & Metrics**
   - Track connection counts, message rates, errors, and latency
   - Set up alerts for abnormal connection patterns or error rates
   - Log connection lifecycle events for debugging

### Configuration Example

```javascript
// Example server configuration
const WebSocket = require('ws');
const http = require('http');
const jwt = require('jsonwebtoken');

// Create HTTP server
const server = http.createServer();

// Create WebSocket server
const wss = new WebSocket.Server({
  server: server,
  // Validate the origin if needed
  verifyClient: (info, callback) => {
    const origin = info.origin || info.req.headers.origin;
    // Allow connections from our domains
    const allowedOrigins = [
      'https://degenduel.me',
      'https://dev.degenduel.me',
      'http://localhost:3000'
    ];
    
    if (allowedOrigins.includes(origin)) {
      callback(true);
    } else {
      callback(false, 401, 'Origin not allowed');
    }
  },
  // Handle protocol selection for authentication
  handleProtocols: (protocols, request) => {
    // If no protocols provided, accept connection without auth
    if (!protocols || protocols.length === 0) {
      return '';
    }
    
    // Return the first protocol (the session token)
    return protocols[0];
  }
});

// Connection handler
wss.on('connection', (ws, req) => {
  // Extract token from protocol or URL
  const sessionToken = ws.protocol;
  
  // Get the endpoint from the URL
  const endpoint = new URL(req.url, 'http://localhost').pathname;
  
  // Check if this endpoint requires authentication
  const requiresAuth = !publicEndpoints.includes(endpoint);
  
  // Handle session token authentication
  if (sessionToken && sessionToken.length > 10) {
    jwt.verify(sessionToken, process.env.JWT_SECRET, (err, decoded) => {
      if (err) {
        if (requiresAuth) {
          ws.close(1008, 'Invalid session token');
          return;
        }
      } else {
        // Authentication successful
        ws.user = decoded;
        ws.authenticated = true;
      }
      
      // Complete connection setup
      setupConnection(ws, endpoint);
    });
  } else if (requiresAuth) {
    // No token provided for protected endpoint
    ws.close(1008, 'Authentication required');
  } else {
    // Public endpoint, no auth needed
    setupConnection(ws, endpoint);
  }
});

// Start the server
server.listen(8080, () => {
  console.log('WebSocket server is running on port 8080');
});
```

This backend implementation works in conjunction with the frontend WebSocket architecture to provide a robust, secure, and scalable real-time communication system.