// tests/price-apis.test.ts
import { DexScreenerService, TokenWithMarketData } from '../src/services/dexscreener';

// ANSI color codes
const colors = {
    dex: '\x1b[36m',    // Cyan for DexScreener
    gecko: '\x1b[35m',  // Magenta for CoinGecko
    diff: '\x1b[33m',   // Yellow for differences
    reset: '\x1b[0m',   // Reset color
    positive: '\x1b[32m', // Green for positive changes
    negative: '\x1b[31m'  // Red for negative changes
};

interface DegenDuelToken {
    id: number;
    address: string;
    symbol: string;
    name: string;
    market_cap: string;
    change_24h: string;
    volume_24h: string;
}

interface CoinGeckoData {
    id: string;
    symbol: string;
    name: string;
    market_data?: {
        current_price?: {
            usd?: number;
        };
        total_volume?: {
            usd?: number;
        };
        market_cap?: {
            usd?: number;
        };
        price_change_percentage_24h?: number;
    };
    market_cap_rank?: number;
    developer_data?: {
        repos_count?: number;
    };
    community_data?: {
        twitter_followers?: number;
        reddit_subscribers?: number;
        telegram_channel_user_count?: number;
    };
    tickers?: any[];
}

// dexscreener interface is imported from services/dexscreener.ts

interface PriceComparison {
    token: string;
    dexscreener?: TokenWithMarketData | null;
    coingecko?: CoinGeckoData;
    difference?: {
        price: number;
        volume: number;
        marketCap: number;
    };
}

// Fetch tokens from DegenDuel API
async function fetchDegenDuelTokens(): Promise<DegenDuelToken[]> {
    const response = await fetch('https://degenduel.me/api/tokens');
    return await response.json();
}

// Compare DexScreener vs CoinGecko APIs
async function comparePriceAPIs() {
    console.log('Comparing DexScreener vs CoinGecko Data\n');

    // Fetch tokens from DegenDuel API
    const allTokens = await fetchDegenDuelTokens();
    const tokens = allTokens.slice(0, 18).map(token => ({
        address: token.address,
        geckoId: token.symbol.toLowerCase() // Note: This might need adjustment
    }));

    const comparisons: PriceComparison[] = [];

    for (const token of tokens) {
        console.log(`\n${colors.reset}Comparing ${token.address}:`);
        
        const comparison: PriceComparison = {
            token: token.address,
            dexscreener: await DexScreenerService.fetchTokenInfo(token.address),
            coingecko: await fetch(
                `https://api.coingecko.com/api/v3/coins/${token.geckoId}?localization=false&tickers=true&market_data=true&community_data=true&developer_data=true`
            ).then(res => res.json()).catch(() => null)
        };

        comparisons.push(comparison);

        // Display DexScreener Data
        console.log(`\n${colors.dex}DexScreener Data:${colors.reset}`);
        if (comparison.dexscreener) {
            console.log(`  Price: $${comparison.dexscreener.currentPrice?.toFixed(8) || 'N/A'}`);
            console.log(`  24h Volume: $${comparison.dexscreener.volume24h?.toLocaleString() || 'N/A'}`);
            console.log(`  Market Cap: $${comparison.dexscreener.marketCap?.toLocaleString() || 'N/A'}`);
            console.log(`  Social Links: ${comparison.dexscreener.socials?.length || 0}`);
            console.log(`  Website Links: ${comparison.dexscreener.websites?.length || 0}`);
        } else {
            console.log('  No data available');
        }

        // Display CoinGecko Data
        console.log(`\n${colors.gecko}CoinGecko Data:${colors.reset}`);
        if (comparison.coingecko) {
            console.log(`  Price: $${comparison.coingecko.market_data?.current_price?.usd?.toFixed(8) || 'N/A'}`);
            console.log(`  24h Volume: $${comparison.coingecko.market_data?.total_volume?.usd?.toLocaleString() || 'N/A'}`);
            console.log(`  Market Cap: $${comparison.coingecko.market_data?.market_cap?.usd?.toLocaleString() || 'N/A'}`);
            console.log(`  Market Cap Rank: #${comparison.coingecko.market_cap_rank || 'N/A'}`);
            console.log(`\n  ${colors.gecko}Additional CoinGecko Data:${colors.reset}`);
            console.log(`  • Github Repos: ${comparison.coingecko.developer_data?.repos_count || 0}`);
            console.log(`  • Reddit Subscribers: ${comparison.coingecko.community_data?.reddit_subscribers?.toLocaleString() || 0}`);
            console.log(`  • Twitter Followers: ${comparison.coingecko.community_data?.twitter_followers?.toLocaleString() || 0}`);
            console.log(`  • Telegram Users: ${comparison.coingecko.community_data?.telegram_channel_user_count?.toLocaleString() || 0}`);
            console.log(`  • Exchange Listings: ${comparison.coingecko.tickers?.length || 0}`);
        } else {
            console.log('  No data available');
        }

        // Display Differences
        if (comparison.dexscreener?.currentPrice && comparison.coingecko?.market_data?.current_price?.usd) {
            const priceDiff = ((comparison.dexscreener.currentPrice - comparison.coingecko.market_data.current_price.usd) / 
                              comparison.coingecko.market_data.current_price.usd * 100);
            
            console.log(`\n${colors.diff}Differences:${colors.reset}`);
            console.log(`  Price Difference: ${priceDiff >= 0 ? colors.positive : colors.negative}${priceDiff.toFixed(2)}%${colors.reset}`);
        }

        // Rate limit delay
        await new Promise(resolve => setTimeout(resolve, 6000));
    }

    return comparisons;
}

// Run the comparison
comparePriceAPIs().then(() => {
    console.log('\nComparison completed');
}).catch(error => {
    console.error('Comparison failed:', error);
});