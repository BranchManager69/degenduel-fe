Vanity Wallet Management Guide for Frontend Team

  Overview

  This guide details how to implement vanity wallet management features in the admin dashboard. The system now uses a
  local JavaScript-based generator with worker threads instead of an external GPU server, making it more self-contained
  and easier to manage.

  System Architecture

  The vanity wallet system consists of:

  1. Local Generator - Uses Node.js worker threads to generate vanity Solana addresses directly on the server
  2. Database Storage - Stores wallet information with encrypted private keys
  3. Admin API - Endpoints for creating, listing, and managing vanity wallets

  API Endpoints

  1. List All Vanity Wallets

  GET /api/admin/vanity-wallets

  Parameters:
  - status: Filter by status (pending, processing, completed, failed, cancelled)
  - isUsed: Filter by usage (true/false)
  - pattern: Filter by pattern
  - limit: Maximum results (default: 100)
  - offset: Pagination offset (default: 0)

  Response:
  {
    "wallets": [
      {
        "id": 123,
        "pattern": "DUEL",
        "is_suffix": false,
        "case_sensitive": true,
        "status": "completed",
        "wallet_address": "DUELxyz...",
        "private_key": "[REDACTED]",
        "created_at": "2025-04-07T01:23:45Z",
        "completed_at": "2025-04-07T01:25:45Z"
      }
    ],
    "pagination": {
      "total": 50,
      "limit": 100,
      "offset": 0
    }
  }

  2. Create a Vanity Wallet Request

  POST /api/admin/vanity-wallets

  Body:
  {
    "pattern": "DUEL",
    "isSuffix": false,
    "caseSensitive": true
  }

  Response:
  {
    "status": "accepted",
    "message": "Vanity wallet generation for pattern 'DUEL' has been queued",
    "requestId": 123,
    "pattern": "DUEL",
    "isSuffix": false,
    "caseSensitive": true,
    "createdAt": "2025-04-07T01:23:45Z"
  }

  3. Get a Specific Vanity Wallet

  GET /api/admin/vanity-wallets/:id

  Response:
  {
    "id": 123,
    "pattern": "DUEL",
    "is_suffix": false,
    "case_sensitive": true,
    "status": "completed",
    "wallet_address": "DUELxyz...",
    "private_key": "[REDACTED]",
    "created_at": "2025-04-07T01:23:45Z",
    "completed_at": "2025-04-07T01:25:45Z"
  }

  4. Cancel a Vanity Wallet Job

  POST /api/admin/vanity-wallets/:id/cancel

  Response:
  {
    "status": "cancelled",
    "message": "Vanity wallet generation job cancelled",
    "walletId": 123,
    "pattern": "DUEL"
  }

  5. Create Multiple Vanity Wallet Requests (Batch)

  POST /api/admin/vanity-wallets/batch

  Body:
  {
    "patterns": ["DUEL", "DEGEN", "MOON"],
    "isSuffix": false,
    "caseSensitive": true
  }

  Response:
  {
    "status": "accepted",
    "message": "Batch of 3 vanity wallet generation requests submitted",
    "results": [
      {
        "status": "accepted",
        "pattern": "DUEL",
        "requestId": 123
      },
      {
        "status": "accepted",
        "pattern": "DEGEN",
        "requestId": 124
      },
      {
        "status": "accepted",
        "pattern": "MOON",
        "requestId": 125
      }
    ]
  }

  UI Implementation Guidelines

  1. Dashboard Overview

  Create a dashboard with the following components:

  - Summary statistics card:
    - Total wallets
    - Wallets by status
    - Available vs used wallets
  - Generator status card:
    - Processing status
    - Active jobs
    - Queue length
    - Performance metrics (if available)
  - Filter controls:
    - Dropdown for status filter
    - Toggle for used/unused
    - Search field for pattern
    - Results per page selector
  - Wallet table with columns:
    - ID
    - Pattern
    - Status (color-coded)
    - Created/Completed dates
    - Address (truncated)
    - Actions

  2. Creation Form

  Implement a form with:

  - Pattern input with validation (1-10 chars)
  - Options:
    - Prefix/suffix toggle
    - Case sensitivity toggle
  - Performance note explaining local generation speed
  - Submit button with loading state

  3. Batch Creation

  For bulk creation:

  - Multi-line input for patterns (one per line)
  - Same options as single creation
  - Progress indicator for submission
  - Results summary once completed

  4. Detail View

  For each wallet:

  - Full details panel
  - Performance metrics:
    - Attempts
    - Duration
    - Generation rate
  - Action buttons:
    - Cancel (if pending/processing)
    - Assign to contest (if completed and unused)

  5. Generation Queue Monitor

  Add a real-time view of:

  - Current active jobs
  - Queue length
  - Recently completed jobs
  - Performance statistics

  Technical Notes

  Generator Performance

  The local JavaScript generator is significantly slower than GPU-based solutions:

  - Expect ~10,000-30,000 addresses/second per CPU core
  - A simple 4-letter pattern might take seconds to minutes
  - Longer or more complex patterns could take several minutes or hours

  Communicate this clearly to admins to set proper expectations.

  Private Key Handling

  Private keys are encrypted in the database using AES-256-GCM:

  - Never display actual private keys in the UI
  - The system automatically handles decryption when needed
  - When displaying in the UI, always show "[REDACTED]" for security

  Error Handling

  Implement comprehensive error handling:

  - Display specific API error messages
  - Add retry mechanisms for failed API calls
  - Show appropriate loading states during generation

  Implementation Examples

  React Component for Vanity Wallet List

  function VanityWalletList() {
    const [wallets, setWallets] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({
      status: '',
      isUsed: '',
      pattern: '',
      limit: 20,
      offset: 0
    });

    useEffect(() => {
      fetchWallets();
    }, [filters]);

    const fetchWallets = async () => {
      setLoading(true);
      try {
        const queryParams = new URLSearchParams();
        Object.entries(filters).forEach(([key, value]) => {
          if (value !== '') queryParams.append(key, value);
        });

        const response = await fetch(`/api/admin/vanity-wallets?${queryParams}`);
        const data = await response.json();

        if (response.ok) {
          setWallets(data.wallets);
        } else {
          // Handle error
          console.error('Failed to fetch wallets:', data.error);
        }
      } catch (error) {
        console.error('Error fetching wallets:', error);
      } finally {
        setLoading(false);
      }
    };

    // Render table, filters, etc.
  }

  Wallet Creation Form

  function CreateVanityWalletForm() {
    const [pattern, setPattern] = useState('');
    const [isSuffix, setIsSuffix] = useState(false);
    const [caseSensitive, setCaseSensitive] = useState(true);
    const [loading, setLoading] = useState(false);
    const [result, setResult] = useState(null);

    const handleSubmit = async (e) => {
      e.preventDefault();
      setLoading(true);

      try {
        const response = await fetch('/api/admin/vanity-wallets', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            pattern,
            isSuffix,
            caseSensitive
          })
        });

        const data = await response.json();

        if (response.ok) {
          setResult(data);
          // Reset form or show success message
        } else {
          // Handle API error
          console.error('Failed to create wallet:', data.error);
        }
      } catch (error) {
        console.error('Error submitting form:', error);
      } finally {
        setLoading(false);
      }
    };

    // Render form
  }

  Best Practices

  1. Real-time updates: Consider implementing WebSocket connections to receive real-time updates on job status
  2. Performance expectations: Clearly communicate generation times to avoid user confusion
  3. Batch operations: Encourage batch creation for multiple similar patterns
  4. Security focus: Never expose private keys in the UI and ensure proper admin-only access
  5. Error handling: Implement robust error handling with clear user feedback

  By implementing this UI, admins will have full control over the vanity wallet generation process, with a clear
  understanding of the local generation approach and its performance characteristics.