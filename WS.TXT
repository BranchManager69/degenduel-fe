● Comprehensive Guide to DegenDuel Unified WebSocket System

  Connection Information

  - WebSocket Endpoint: /api/v69/ws
  - Protocol: Standard WebSocket (ws:// or wss://)
  - Compression: Explicitly disabled (perMessageDeflate: false)
  - Maximum Payload: 50KB

  Message Structure

  All messages are JSON formatted and must have at minimum a type field.

  Client to Server Messages

  1. SUBSCRIBE Message

  {
    "type": "SUBSCRIBE",
    "topics": ["market-data"],
    "authToken": "jwt-token-here"  // Optional, required for restricted topics
  }
  - Purpose: Subscribe to one or more topics for real-time updates
  - Authentication: Required for topics: user, portfolio, admin, wallet, skyduel
  - Response: ACKNOWLEDGMENT with list of topics successfully subscribed to

  2. UNSUBSCRIBE Message

  {
    "type": "UNSUBSCRIBE",
    "topics": ["market-data"]
  }
  - Purpose: Unsubscribe from topics to stop receiving updates
  - Authentication: Not required
  - Response: ACKNOWLEDGMENT with list of topics unsubscribed from

  3. REQUEST Message

  {
    "type": "REQUEST",
    "topic": "market-data",  // The topic domain this request applies to
    "action": "getToken",    // The specific action being requested
    "symbol": "SOL",         // Action-specific parameters
    "requestId": "req123"    // Optional client-generated ID for tracking responses
  }
  - Purpose: Request specific data without subscribing to ongoing updates
  - Authentication: Depends on the topic being requested
  - Response: DATA message with requested information or ERROR if request fails

  4. COMMAND Message

  {
    "type": "COMMAND",
    "topic": "user",
    "action": "updateProfile",
    "data": {
      "nickname": "NewNickname"
    },
    "requestId": "cmd456"
  }
  - Purpose: Make changes to server state (write operations)
  - Authentication: Always required
  - Response: ACKNOWLEDGMENT or ERROR depending on command result

  Server to Client Messages

  1. DATA Message

  {
    "type": "DATA",
    "topic": "market-data",
    "action": "getToken",     // Optional: indicates which request/action this data is for
    "requestId": "req123",    // Optional: matches client requestId if this is a response
    "data": {                 // Actual data payload
      "symbol": "SOL",
      "price": "123.45",
      "change24h": "2.5"
    },
    "timestamp": "2025-03-27T12:34:56.789Z",
    "initialData": false      // Optional: true if this is initial data after subscription
  }
  - Purpose: Deliver requested data or broadcast topic updates
  - Forms: Response to REQUEST or broadcast to topic subscribers

  2. ERROR Message

  {
    "type": "ERROR",
    "message": "Invalid token symbol",
    "code": 4008,
    "timestamp": "2025-03-27T12:34:56.789Z"
  }
  - Purpose: Notify client of errors in their requests
  - Common Error Codes:
    - 4000-4099: Client request errors
    - 5000-5099: Server processing errors

  3. SYSTEM Message

  {
    "type": "SYSTEM",
    "message": "Connected to DegenDuel Unified WebSocket",
    "serverTime": "2025-03-27T12:34:56.789Z",
    "topics": ["market-data", "portfolio", "system", "contest", "user", "admin", "wallet", "skyduel"],
    "action": "heartbeat"    // Optional: specific system action
  }
  - Purpose: System-level communications, connection status, heartbeats
  - Heartbeats: Sent every 30 seconds to keep connections alive

  4. ACKNOWLEDGMENT Message

  {
    "type": "ACKNOWLEDGMENT",
    "operation": "subscribe",
    "topics": ["market-data"],
    "timestamp": "2025-03-27T12:34:56.789Z"
  }
  - Purpose: Confirm successful operations like subscriptions, commands
  - Details: Includes relevant information about the completed operation

  Implemented Topics & Actions

  1. MARKET_DATA (Fully Implemented)

  - Authentication: Public (no auth required)
  - Subscription: Available to all clients
  - Actions:
    - getToken
        - Parameters: symbol (required)
      - Returns: Detailed information about the specified token
      - Example Request:
      {
    "type": "REQUEST",
    "topic": "market-data",
    "action": "getToken",
    "symbol": "SOL",
    "requestId": "token123"
  }
    - getAllTokens
        - Parameters: None
      - Returns: List of all available tokens with their details
      - Example Request:
      {
    "type": "REQUEST",
    "topic": "market-data",
    "action": "getAllTokens",
    "requestId": "allTokens123"
  }
  - Broadcasts: Price updates, new token listings, market movements
  - Testing: Fully testable for both authenticated and non-authenticated users

  2. USER (Implemented)

  - Authentication: Required
  - Subscription: Only for authenticated users
  - Actions:
    - getProfile
        - Parameters: None (uses authenticated user context)
      - Returns: User profile information including wallet address, nickname, role, etc.
      - Example Request:
      {
    "type": "REQUEST",
    "topic": "user",
    "action": "getProfile",
    "requestId": "profile123"
  }
    - getStats
        - Parameters: None (uses authenticated user context)
      - Returns: User stats including total trades, win/loss count, XP, level, etc.
      - Example Request:
      {
    "type": "REQUEST",
    "topic": "user",
    "action": "getStats",
    "requestId": "stats123"
  }
  - Broadcasts: None currently implemented
  - Testing: Requires valid authentication token

  3. SYSTEM (Partially Implemented)

  - Authentication: Public
  - Subscription: Automatic for all connections
  - Actions: None explicitly defined, system messages are sent automatically
  - Messages:
    - Connection confirmation upon initial connection
    - Heartbeat every 30 seconds
  - Testing: Automatic on connection, no explicit subscription needed

  4. PORTFOLIO (Defined, Not Implemented)

  - Authentication: Required
  - Subscription: Only for authenticated users
  - Status: Topic defined but no actions implemented yet
  - Future Plans: Will include portfolio balances, performance metrics

  5. CONTEST (Defined, Not Implemented)

  - Authentication: Public for viewing, authenticated for participation
  - Subscription: Both public and authenticated aspects
  - Status: Topic defined but no actions implemented yet
  - Future Plans: Contest status, participation, and results information

  6. ADMIN (Defined, Not Implemented)

  - Authentication: Required with admin role
  - Subscription: Restricted to admin users
  - Status: Topic defined but no actions implemented yet
  - Future Plans: System monitoring, administration functions

  7. WALLET (Defined, Not Implemented)

  - Authentication: Required
  - Subscription: Only for authenticated users
  - Status: Topic defined but no actions implemented yet
  - Future Plans: Wallet balances, transaction status updates

  8. SKYDUEL (Defined, Not Implemented)

  - Authentication: Required for participation
  - Subscription: Only for authenticated users
  - Status: Topic defined but no actions implemented yet
  - Future Plans: Game state, matchmaking, and results

  Authentication Flow

  1. Connection: Client connects to WebSocket endpoint without authentication
  2. Public Access: Can immediately subscribe to public topics (MARKET_DATA, SYSTEM)
  3. Authentication: To access restricted topics, send a SUBSCRIBE message with authToken:
  {
    "type": "SUBSCRIBE",
    "topics": ["user", "portfolio"],
    "authToken": "jwt-token-here"
  }
  4. Validation: Server validates the JWT token against config.jwt.secret
  5. Access Granted: If valid, client receives ACKNOWLEDGMENT and is subscribed
  6. Access Denied: If invalid, client receives ERROR with appropriate message

  Testing Instructions

  Non-Authenticated Testing

  1. Connect to the WebSocket endpoint
  2. Subscribe to public topics (MARKET_DATA, SYSTEM):
  {
    "type": "SUBSCRIBE",
    "topics": ["market-data"]
  }
  3. Test market data requests:
  {
    "type": "REQUEST",
    "topic": "market-data",
    "action": "getAllTokens",
    "requestId": "test123"
  }
  4. Observe system messages like heartbeats

  Authenticated Testing

  1. Obtain a valid JWT token through normal authentication flow
  2. Connect to WebSocket endpoint
  3. Authenticate and subscribe to restricted topics:
  {
    "type": "SUBSCRIBE",
    "topics": ["user", "market-data"],
    "authToken": "jwt-token-here"
  }
  4. Test authenticated actions:
  {
    "type": "REQUEST",
    "topic": "user",
    "action": "getProfile",
    "requestId": "profile123"
  }

  Connection Sample Code

  // Basic connection
  const ws = new WebSocket('wss://example.com/api/v69/ws');

  // Setup event handlers
  ws.onopen = () => {
    console.log('Connected to WebSocket');
    // Subscribe to topics
    ws.send(JSON.stringify({
      type: 'SUBSCRIBE',
      topics: ['market-data']
    }));
  };

  ws.onmessage = (event) => {
    const message = JSON.parse(event.data);
    console.log('Received:', message);

    // Handle different message types
    switch(message.type) {
      case 'DATA':
        handleData(message);
        break;
      case 'ERROR':
        handleError(message);
        break;
      case 'SYSTEM':
        handleSystem(message);
        break;
      case 'ACKNOWLEDGMENT':
        handleAcknowledgment(message);
        break;
    }
  };

  // Helper to make requests
  function makeRequest(topic, action, params = {}, requestId = null) {
    const request = {
      type: 'REQUEST',
      topic,
      action,
      ...params,
      requestId: requestId || generateRequestId()
    };
    ws.send(JSON.stringify(request));
    return request.requestId;
  }

  // Helper for authentication
  function authenticate(token) {
    ws.send(JSON.stringify({
      type: 'SUBSCRIBE',
      topics: ['user'], // Or other restricted topics
      authToken: token
    }));
  }

  This guide covers the current implemented state of the WebSocket system, with clear indication of which features are
  currently available for testing and which are defined but not yet implemented. 