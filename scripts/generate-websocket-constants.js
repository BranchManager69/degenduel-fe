#!/usr/bin/env node

/**
 * WebSocket Constants Generator
 * 
 * This script generates TypeScript enum files for WebSocket action constants
 * based on the websocket-actions-report.md file.
 * 
 * Usage:
 * node generate-websocket-constants.js [--output=/path/to/output.ts]
 * 
 * @author Claude Code
 * @created 2025-05-06
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get __dirname equivalent in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Default paths
const reportPath = path.resolve(process.cwd(), 'websocket-actions-report.md');
let outputPath = path.resolve(process.cwd(), '../degenduel-shared/src/websocket/actions.ts');

// Process command line arguments
process.argv.slice(2).forEach(arg => {
  if (arg.startsWith('--output=')) {
    outputPath = arg.split('=')[1];
  }
});

// Validate report exists
if (!fs.existsSync(reportPath)) {
  console.error(`Report file does not exist: ${reportPath}`);
  console.error('Run find-websocket-actions.js first to generate the report.');
  process.exit(1);
}

// Parse the report file to extract actions
function parseReport(reportPath) {
  const content = fs.readFileSync(reportPath, 'utf8');
  
  // Extract the proposed enum section
  const enumSection = content.match(/## Proposed Shared Enum\n\n```typescript\n([\s\S]+?)```/);
  
  if (!enumSection || !enumSection[1]) {
    console.error('Could not find the enum section in the report.');
    process.exit(1);
  }
  
  return enumSection[1];
}

// Generate the TypeScript file with additional metadata
function generateTsFile(enumContent) {
  const ts = `/**
 * WebSocket Action Constants
 * 
 * This file contains all WebSocket action constants used in both frontend and backend.
 * IMPORTANT: Do not modify manually. Generated by generate-websocket-constants.js.
 * 
 * @generated ${new Date().toISOString()}
 */

${enumContent}

/**
 * Helper type to get all action names
 */
export type DDWebSocketActionName = keyof typeof DDWebSocketActions;

/**
 * Helper function to check if a string is a valid WebSocket action
 */
export function isValidWebSocketAction(action: string): action is DDWebSocketActionName {
  return Object.values(DDWebSocketActions).includes(action as any);
}

/**
 * Helper function to get the enum key for an action value
 */
export function getWebSocketActionKey(actionValue: string): DDWebSocketActionName | undefined {
  const entry = Object.entries(DDWebSocketActions).find(([_, value]) => value === actionValue);
  return entry ? entry[0] as DDWebSocketActionName : undefined;
}
`;

  return ts;
}

// Write the file
try {
  const enumContent = parseReport(reportPath);
  const tsContent = generateTsFile(enumContent);
  
  // Create directory if it doesn't exist
  const dir = path.dirname(outputPath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  fs.writeFileSync(outputPath, tsContent);
  console.log(`Generated WebSocket constants at: ${outputPath}`);
} catch (err) {
  console.error('Error generating TypeScript file:', err);
  process.exit(1);
}