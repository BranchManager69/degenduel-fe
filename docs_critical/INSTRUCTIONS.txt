Frontend Transaction Update Instructions

  Your website is being flagged because your client-side code uses an outdated transaction method that Phantom Wallet wants to
  deprecate. Here's what your frontend developers need to do:

  Issue

  Phantom Wallet is flagging your site for using the old method:
  // Old method (currently being flagged)
  const signedTx = await wallet.signTransaction(tx);
  const txId = await connection.sendRawTransaction(signedTx.serialize());
  await connection.confirmTransaction(txId);

  Required Changes

  1. Update Solana Web3.js:
  npm install @solana/web3.js@^2.0.0
  2. Replace the old sign+send pattern with the new method:
  // New method (Phantom recommended)
  const { signature } = await wallet.signAndSendTransaction({
    transaction: tx
  });

  // Optionally confirm if needed
  await connection.confirmTransaction({ signature });
  3. Update for contest entry and token whitelist submission:
    - Look in your frontend code for anywhere that uses signTransaction followed by sendRawTransaction
    - Replace with the single signAndSendTransaction call as shown above
  4. For robust transaction confirmation:
  const latestBlockhash = await connection.getLatestBlockhash();

  // Add latest blockhash to transaction
  transaction.recentBlockhash = latestBlockhash.blockhash;
  transaction.feePayer = wallet.publicKey;

  // Use signAndSendTransaction
  const { signature } = await wallet.signAndSendTransaction({
    transaction
  });

  // Confirm with blockhash data
  await connection.confirmTransaction({
    signature,
    blockhash: latestBlockhash.blockhash,
    lastValidBlockHeight: latestBlockhash.lastValidBlockHeight
  });

  This change only affects your client-side code. No server-side changes are needed if your clients are still creating the
  transactions.


‚óè Frontend Transaction Update Instructions - Round 2

  After implementing the basic improvements in Round 1, consider these advanced enhancements:

  Advanced Improvements

  1. Use Address Lookup Tables (ALTs):
    - Create lookup tables for frequently used addresses
    - Reduces transaction size and fees
    - Enables transactions with many accounts (up to 256)

  // Example: Creating and using an ALT
  const lookupTableAccount = await fetchLookupTables([lookupTableAddress], connection);
  const message = new TransactionMessage({
    payerKey: wallet.publicKey,
    recentBlockhash: blockhash,
    instructions: transferInstructions,
  }).compileToV0Message([lookupTableAccount]);


  2. Implement Versioned Transactions:
    - Use VersionedTransaction for better backward compatibility
    - Supports Solana extensions like ALTs
  const transaction = new VersionedTransaction(message);


  3. Add Compute Unit Budget Controls:
    - Prioritize transactions by setting higher compute limits
    - Avoid transaction failures due to complex operations
  const modifyComputeUnitsIx = ComputeBudgetProgram.setComputeUnitLimit({
    units: 200000 // Adjust based on transaction complexity
  });


  4. Utilize @solana/kit Helpers:
    - Use factory functions for cleaner transaction management
    - Simplifies error handling and confirmations
  import {
    sendAndConfirmTransactionFactory,
    getComputeUnitEstimateForTransactionMessageFactory
  } from '@solana/kit';


  5. Implement Durable Nonces:
    - For transactions that need longer validity periods
    - Useful for multi-step processes that may take time
  // Using durable nonce instead of recent blockhash
  const nonceAccount = await connection.getNonce(nonceAccountPublicKey);
  const nonceInstruction = SystemProgram.nonceAdvance({
    authorizedPubkey: authority.publicKey,
    noncePubkey: nonceAccountPublicKey,
  });


  These more advanced improvements can be implemented once the basic transaction method updates are complete and tested.

